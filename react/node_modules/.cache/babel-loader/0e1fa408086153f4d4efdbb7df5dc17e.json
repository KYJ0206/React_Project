{"ast":null,"code":"import _objectSpread from\"/Users/hellodegital/Desktop/React_Project/react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/hellodegital/Desktop/React_Project/react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useRef,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ToDoItem=function ToDoItem(_ref){var todoItem=_ref.todoItem,todoList=_ref.todoList,setTodoList=_ref.setTodoList;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),edited=_useState2[0],setEdited=_useState2[1];var _useState3=useState(todoItem.text),_useState4=_slicedToArray(_useState3,2),newText=_useState4[0],setNewTest=_useState4[1];var editInputRef=useRef(null);useEffect(function(){// edit 모드일때 포커싱을 한다.\nif(edited){editInputRef.current.focus();}},[edited]);var onChangeCheckbox=function onChangeCheckbox(){var nextTodoList=todoList.map(function(item){return _objectSpread(_objectSpread({},item),{},{// id 값이 같은 항목의 checked 값을 Toggle 함\nchecked:item.id===todoItem.id?!item.checked:item.checked});});setTodoList(nextTodoList);};var onClickEditButton=function onClickEditButton(){console.log(\"수정\");setEdited(true);};var onChangeEditInput=function onChangeEditInput(e){setNewTest(e.target.value);};var onClickSubmitButton=function onClickSubmitButton(e){if(e.key==='Enter'){var nextTodoList=todoList.map(function(item){return _objectSpread(_objectSpread({},item),{},{text:item.id===todoItem.id?newText:item.text// 새로운 아이템 내용을 넣어줌\n});});setTodoList(nextTodoList);setEdited(false);}};var onClickDeleteButton=function onClickDeleteButton(){console.log(\"지울까요?\");if(window.confirm('정말로 지우실건가요?')){var nextTodoList=todoList.map(function(item){return _objectSpread(_objectSpread({},item),{},{deleted:item.id===todoItem.id?true:item.deleted});});setTodoList(nextTodoList);}};return/*#__PURE__*/_jsxs(\"li\",{className:\"todoapp__item\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",className:\"todoapp__item-checkbox\",checked:todoItem.checked,onChange:onChangeCheckbox}),// 아이템 내용\nedited?/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"todoapp__item-edit-input\",value:newText,ref:editInputRef,onChange:onChangeEditInput,onKeyPress:onClickSubmitButton}):/*#__PURE__*/_jsx(\"span\",{className:\"todoapp__item-ctx \".concat(todoItem.checked?'todoapp__item-ctx-checked':''),children:todoItem.text}),// 수정 버튼\n// 완료한 일인 경우에는 null을 반환하여 보이지 않도록 함\n!todoItem.checked?edited?/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"todoapp__item-edit-btn\",onClick:onClickSubmitButton,children:\"\\uD83D\\uDC4C\"}):/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"todoapp__item-edit-btn\",onClick:onClickEditButton,children:\"\\u270F\"}):null,/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"todoapp__item-delete-btn\",onClick:onClickDeleteButton,children:\"\\uD83D\\uDDD1\"})]});};export default ToDoItem;","map":{"version":3,"sources":["/Users/hellodegital/Desktop/React_Project/react/src/components/TodoList/ToDoItem.jsx"],"names":["React","useEffect","useRef","useState","ToDoItem","todoItem","todoList","setTodoList","edited","setEdited","text","newText","setNewTest","editInputRef","current","focus","onChangeCheckbox","nextTodoList","map","item","checked","id","onClickEditButton","console","log","onChangeEditInput","e","target","value","onClickSubmitButton","key","onClickDeleteButton","window","confirm","deleted"],"mappings":"yQAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,CAAmCC,QAAnC,KAAmD,OAAnD,C,wFAGA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAyC,IAAtCC,CAAAA,QAAsC,MAAtCA,QAAsC,CAA5BC,QAA4B,MAA5BA,QAA4B,CAAlBC,WAAkB,MAAlBA,WAAkB,CACxD,cAA4BJ,QAAQ,CAAC,KAAD,CAApC,wCAAOK,MAAP,eAAeC,SAAf,eACA,eAA8BN,QAAQ,CAACE,QAAQ,CAACK,IAAV,CAAtC,yCAAOC,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,YAAY,CAAGX,MAAM,CAAC,IAAD,CAA3B,CAEAD,SAAS,CAAC,UAAM,CACd;AACA,GAAIO,MAAJ,CAAY,CACVK,YAAY,CAACC,OAAb,CAAqBC,KAArB,GACD,CACF,CALQ,CAKN,CAACP,MAAD,CALM,CAAT,CAOA,GAAMQ,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,GAAMC,CAAAA,YAAY,CAAGX,QAAQ,CAACY,GAAT,CAAa,SAACC,IAAD,wCAC7BA,IAD6B,MAEhC;AACAC,OAAO,CAAED,IAAI,CAACE,EAAL,GAAYhB,QAAQ,CAACgB,EAArB,CAA0B,CAACF,IAAI,CAACC,OAAhC,CAA0CD,IAAI,CAACC,OAHxB,IAAb,CAArB,CAMAb,WAAW,CAACU,YAAD,CAAX,CACD,CARD,CAUA,GAAMK,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC5BC,OAAO,CAACC,GAAR,CAAY,IAAZ,EACFf,SAAS,CAAC,IAAD,CAAT,CACD,CAHD,CAKA,GAAMgB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,CAAD,CAAO,CAC/Bd,UAAU,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV,CACD,CAFD,CAIA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACH,CAAD,CAAO,CACjC,GAAIA,CAAC,CAACI,GAAF,GAAU,OAAd,CAAuB,CACrB,GAAMb,CAAAA,YAAY,CAAGX,QAAQ,CAACY,GAAT,CAAa,SAACC,IAAD,wCAC7BA,IAD6B,MAEhCT,IAAI,CAAES,IAAI,CAACE,EAAL,GAAYhB,QAAQ,CAACgB,EAArB,CAA0BV,OAA1B,CAAoCQ,IAAI,CAACT,IAAM;AAFrB,IAAb,CAArB,CAIAH,WAAW,CAACU,YAAD,CAAX,CAEAR,SAAS,CAAC,KAAD,CAAT,CACD,CACF,CAVD,CAYA,GAAMsB,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9BR,OAAO,CAACC,GAAR,CAAY,OAAZ,EACF,GAAIQ,MAAM,CAACC,OAAP,CAAe,aAAf,CAAJ,CAAmC,CACjC,GAAMhB,CAAAA,YAAY,CAAGX,QAAQ,CAACY,GAAT,CAAa,SAACC,IAAD,wCAC7BA,IAD6B,MAEhCe,OAAO,CAAEf,IAAI,CAACE,EAAL,GAAYhB,QAAQ,CAACgB,EAArB,CAA0B,IAA1B,CAAiCF,IAAI,CAACe,OAFf,IAAb,CAArB,CAKA3B,WAAW,CAACU,YAAD,CAAX,CACD,CACF,CAVD,CAYA,mBACE,YAAI,SAAS,CAAC,eAAd,wBAEE,cACE,IAAI,CAAC,UADP,CAEE,SAAS,CAAC,wBAFZ,CAGE,OAAO,CAAEZ,QAAQ,CAACe,OAHpB,CAIE,QAAQ,CAAEJ,gBAJZ,EAFF,CASI;AACAR,MAAM,cACJ,cACE,IAAI,CAAC,MADP,CAEE,SAAS,CAAC,0BAFZ,CAGE,KAAK,CAAEG,OAHT,CAIE,GAAG,CAAEE,YAJP,CAKE,QAAQ,CAAEY,iBALZ,CAME,UAAU,CAAEI,mBANd,EADI,cAUJ,aACE,SAAS,6BACPxB,QAAQ,CAACe,OAAT,CAAmB,2BAAnB,CAAiD,EAD1C,CADX,UAKGf,QAAQ,CAACK,IALZ,EApBN,CA8BI;AACA;AACA,CAACL,QAAQ,CAACe,OAAV,CACEZ,MAAM,cACJ,eACE,IAAI,CAAC,QADP,CAEE,SAAS,CAAC,wBAFZ,CAGE,OAAO,CAAEqB,mBAHX,0BADI,cASJ,eACE,IAAI,CAAC,QADP,CAEE,SAAS,CAAC,wBAFZ,CAGE,OAAO,CAAEP,iBAHX,oBAVJ,CAkBI,IAlDR,cAsDE,eACE,IAAI,CAAC,QADP,CAEE,SAAS,CAAC,0BAFZ,CAGE,OAAO,CAAES,mBAHX,0BAtDF,GADF,CAgED,CAxHD,CAwIA,cAAe3B,CAAAA,QAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ToDoItem = ({ todoItem, todoList, setTodoList }) => {\n  const [edited, setEdited] = useState(false);\n  const [newText, setNewTest] = useState(todoItem.text);\n\n  const editInputRef = useRef(null);\n\n  useEffect(() => {\n    // edit 모드일때 포커싱을 한다.\n    if (edited) {\n      editInputRef.current.focus();\n    }\n  }, [edited]);\n\n  const onChangeCheckbox = () => {\n    const nextTodoList = todoList.map((item) => ({\n      ...item,\n      // id 값이 같은 항목의 checked 값을 Toggle 함\n      checked: item.id === todoItem.id ? !item.checked : item.checked,\n    }));\n\n    setTodoList(nextTodoList);\n  };\n\n  const onClickEditButton = () => {\n      console.log(\"수정\")\n    setEdited(true);\n  };\n\n  const onChangeEditInput = (e) => {\n    setNewTest(e.target.value);\n  };\n\n  const onClickSubmitButton = (e) => {\n    if (e.key === 'Enter') {\n      const nextTodoList = todoList.map((item) => ({\n        ...item,\n        text: item.id === todoItem.id ? newText : item.text, // 새로운 아이템 내용을 넣어줌\n      }));\n      setTodoList(nextTodoList);\n\n      setEdited(false);\n    }\n  };\n\n  const onClickDeleteButton = () => {\n      console.log(\"지울까요?\")\n    if (window.confirm('정말로 지우실건가요?')) {\n      const nextTodoList = todoList.map((item) => ({\n        ...item,\n        deleted: item.id === todoItem.id ? true : item.deleted,\n      }));\n\n      setTodoList(nextTodoList);\n    }\n  };\n\n  return (\n    <li className=\"todoapp__item\">\n      {/* 아이템 완료 체크 / 체크 해제를 위한 체크박스 */}\n      <input\n        type=\"checkbox\"\n        className=\"todoapp__item-checkbox\"\n        checked={todoItem.checked}\n        onChange={onChangeCheckbox}\n      />\n      {\n        // 아이템 내용\n        edited ? (\n          <input\n            type=\"text\"\n            className=\"todoapp__item-edit-input\"\n            value={newText}\n            ref={editInputRef}\n            onChange={onChangeEditInput}\n            onKeyPress={onClickSubmitButton}\n          />\n        ) : (\n          <span\n            className={`todoapp__item-ctx ${\n              todoItem.checked ? 'todoapp__item-ctx-checked' : ''\n            }`}\n          >\n            {todoItem.text}\n          </span>\n        )\n      }\n      {\n        // 수정 버튼\n        // 완료한 일인 경우에는 null을 반환하여 보이지 않도록 함\n        !todoItem.checked ? (\n          edited ? (\n            <button\n              type=\"button\"\n              className=\"todoapp__item-edit-btn\"\n              onClick={onClickSubmitButton}\n            >\n              👌\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"todoapp__item-edit-btn\"\n              onClick={onClickEditButton}\n            >\n              ✏\n            </button>\n          )\n        ) : null\n      }\n\n      {/* 삭제 버튼 */}\n      <button\n        type=\"button\"\n        className=\"todoapp__item-delete-btn\"\n        onClick={onClickDeleteButton}\n      >\n        🗑\n      </button>\n    </li>\n  );\n};\n\nToDoItem.propTypes = {\n  todoItem: PropTypes.shape({\n    id: PropTypes.number,\n    text: PropTypes.string.isRequired,\n  }),\n  todoList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n    })\n  ),\n  setTodoList: PropTypes.func.isRequired,\n};\n\nexport default ToDoItem;"]},"metadata":{},"sourceType":"module"}