{"ast":null,"code":"var _jsxFileName = \"/Users/hellodegital/Desktop/React_Project/react/first-my-app/src/components/TodoList/ToDoItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport \"./TodoList.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoItem = _ref => {\n  _s();\n\n  let {\n    todoItem,\n    todoList,\n    setTodoList\n  } = _ref;\n  const [edited, setEdited] = useState(false);\n  const [newText, setNewTest] = useState(todoItem.text);\n  const editInputRef = useRef(null);\n  useEffect(() => {\n    if (edited) {\n      editInputRef.current.focus();\n    }\n  }, [edited]);\n\n  const onChangeCheckbox = () => {\n    console.log(\"바꿔\");\n    const nextTodoList = todoList.map(item => ({ ...item,\n      checked: item.id === todoItem.id ? !item.checked : item.checked\n    }));\n    setTodoList(nextTodoList);\n  };\n\n  const onClickEditButton = () => {\n    console.log(\"수정버튼\");\n    setEdited(true);\n  };\n\n  const onChangeEditInput = e => {\n    console.log(\"수정완료\");\n    setNewTest(e.target.value);\n  };\n\n  const onClickSubmitButton = () => {\n    const nextTodoList = todoList.map(item => ({ ...item,\n      text: item.id === todoItem.id ? newText : item.text\n    }));\n    setTodoList(nextTodoList);\n    setEdited(false);\n  };\n\n  const onClickDeleteButton = () => {\n    console.log(\"나나나\");\n    setEdited();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"todoapp__item\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      className: \"todoapp__item-checkbox\",\n      checked: todoItem.checked,\n      onChange: onChangeCheckbox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), // 아이템 내용 \n    edited ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"todoapp__item-edit-input\",\n      value: newText,\n      ref: editInputRef,\n      onChange: onChangeEditInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `todoapp__item-ctx ${todoItem.checked ? 'todoapp__item-ctx-checked' : ''}`,\n      children: todoItem.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 20\n    }, this), // 수정 버튼 \n    // 완료한 일인 경우에는 null을 반환하여 보이지 않도록 함 \n    !todoItem.checked ? edited ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"todoapp__item-edit-btn\",\n      onClick: onClickSubmitButton,\n      children: \"\\uD83D\\uDC4C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"todoapp__item-edit-btn\",\n      onClick: onClickEditButton,\n      children: \"\\u270F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"todoapp__item-delete-btn\",\n      onClick: onClickDeleteButton,\n      children: \"\\uD83D\\uDDD1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ToDoItem, \"WTJnvauJuxkMeYXWfBHWZsZ6/t0=\");\n\n_c = ToDoItem;\nToDoItem.propTypes = {\n  todoItem: PropTypes.shape({\n    id: PropTypes.number,\n    text: PropTypes.string.isRequired\n  }),\n  todoList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired\n  })),\n  setTodoList: PropTypes.func.isRequired\n};\nexport default ToDoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoItem\");","map":{"version":3,"sources":["/Users/hellodegital/Desktop/React_Project/react/first-my-app/src/components/TodoList/ToDoItem.jsx"],"names":["React","useEffect","useRef","useState","PropTypes","ToDoItem","todoItem","todoList","setTodoList","edited","setEdited","newText","setNewTest","text","editInputRef","current","focus","onChangeCheckbox","console","log","nextTodoList","map","item","checked","id","onClickEditButton","onChangeEditInput","e","target","value","onClickSubmitButton","onClickDeleteButton","propTypes","shape","number","string","isRequired","arrayOf","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'; \nimport PropTypes from 'prop-types';\nimport \"./TodoList.scss\"\n\nconst ToDoItem = ({ todoItem, todoList, setTodoList }) => {\n    const [edited, setEdited] = useState(false); \n    const [newText, setNewTest] = useState(todoItem.text); \n\n    const editInputRef = useRef(null);\n\n    useEffect(() => { \n        if (edited) { \n            editInputRef.current.focus(); \n        } \n    }, [edited]);\n    \n    const onChangeCheckbox = () => { \n        console.log(\"바꿔\")\n        const nextTodoList = todoList.map((item) => ({ \n            ...item, checked: item.id === todoItem.id ? !item.checked : item.checked, \n        }));\n\n        setTodoList(nextTodoList); \n    }; \n    \n    const onClickEditButton = () => {\n        console.log(\"수정버튼\")\n        setEdited(true); \n    };\n\n    const onChangeEditInput = (e) => {\n        console.log(\"수정완료\")\n        setNewTest(e.target.value); \n    };\n\n    const onClickSubmitButton = () => { \n        const nextTodoList = todoList.map((item) => ({ \n            ...item, \n            text: item.id === todoItem.id ? newText : item.text,  \n        })); \n        setTodoList(nextTodoList); \n        setEdited(false); \n    };\n    \n    const onClickDeleteButton = () =>{\n        console.log(\"나나나\")\n        setEdited(); \n    }\n\n    return ( \n        <li className=\"todoapp__item\"> \n            {/* 아이템 완료 체크 / 체크 해제를 위한 체크박스 */}\n            <input \n                type=\"checkbox\" \n                className=\"todoapp__item-checkbox\" \n                checked={todoItem.checked} \n                onChange={onChangeCheckbox} \n            /> \n            { \n                // 아이템 내용 \n                edited ? ( \n                    <input \n                        type=\"text\" \n                        className=\"todoapp__item-edit-input\" \n                        value={newText} \n                        ref={editInputRef} \n                        onChange={onChangeEditInput} \n                    /> \n                ) : ( \n                   <span \n                        className={`todoapp__item-ctx ${ \n                            todoItem.checked ? 'todoapp__item-ctx-checked' : '' \n                        }`} \n                    > \n                        {todoItem.text} \n                    </span> \n                ) \n            } \n            {\n                // 수정 버튼 \n                // 완료한 일인 경우에는 null을 반환하여 보이지 않도록 함 \n                !todoItem.checked ? ( \n                    edited ? ( \n                        <button \n                            type=\"button\" \n                            className=\"todoapp__item-edit-btn\" \n                            onClick={onClickSubmitButton} \n                        > \n                            👌 \n                        </button> \n                    ) : ( \n                      <button \n                        type=\"button\" \n                        className=\"todoapp__item-edit-btn\" \n                        onClick={onClickEditButton} \n                      > \n                        ✏ \n                      </button> \n                    ) \n                ) : null \n            } \n\n            {/* 삭제 버튼 */} \n            <button type=\"button\" className=\"todoapp__item-delete-btn\" onClick={onClickDeleteButton}> \n                🗑 \n            </button> \n        </li> \n    ); \n};\n\n\n\nToDoItem.propTypes = {\n    todoItem: PropTypes.shape({\n        id: PropTypes.number, \n        text: PropTypes.string.isRequired, \n    }), \n    todoList: PropTypes.arrayOf(\n        PropTypes.shape({ \n            id: PropTypes.number.isRequired, \n            text: PropTypes.string.isRequired, \n        }) \n    ), \n    setTodoList: PropTypes.func.isRequired, \n}; \n\nexport default ToDoItem;"]},"metadata":{},"sourceType":"module"}