{"ast":null,"code":"var _jsxFileName = \"/Users/hellodegital/Desktop/React_Project/react/first-my-app/src/components/TodoList/ToDoItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoItem = _ref => {\n  _s();\n\n  let {\n    todoItem,\n    todoList,\n    setTodoList\n  } = _ref;\n  const [edited, setEdited] = useState(false);\n  const [newText, setNewTest] = useState(todoItem.text);\n  const editInputRef = useRef(null);\n  useEffect(() => {\n    // edit 모드일때 포커싱을 한다.\n    if (edited) {\n      editInputRef.current.focus();\n    }\n  }, [edited]);\n\n  const onChangeCheckbox = () => {\n    const nextTodoList = todoList.map(item => ({ ...item,\n      // id 값이 같은 항목의 checked 값을 Toggle 함\n      checked: item.id === todoItem.id ? !item.checked : item.checked\n    }));\n    setTodoList(nextTodoList);\n  };\n\n  const onClickEditButton = () => {\n    setEdited(true);\n  };\n\n  const onChangeEditInput = e => {\n    setNewTest(e.target.value);\n  };\n\n  const onClickSubmitButton = e => {\n    if (e.key === 'Enter') {\n      const nextTodoList = todoList.map(item => ({ ...item,\n        text: item.id === todoItem.id ? newText : item.text // 새로운 아이템 내용을 넣어줌\n\n      }));\n      setTodoList(nextTodoList);\n      setEdited(false);\n    }\n  };\n\n  const onClickDeleteButton = () => {\n    if (console.log(\"지울꺼냐\")) {\n      const nextTodoList = todoList.map(item => ({ ...item,\n        deleted: item.id === todoItem.id ? true : item.deleted\n      }));\n      setTodoList(nextTodoList);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"todoapp__item\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      className: \"todoapp__item-checkbox\",\n      checked: todoItem.checked,\n      onChange: onChangeCheckbox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), // 아이템 내용\n    edited ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"todoapp__item-edit-input\",\n      value: newText,\n      ref: editInputRef,\n      onChange: onChangeEditInput,\n      onKeyPress: onClickSubmitButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `todoapp__item-ctx ${todoItem.checked ? 'todoapp__item-ctx-checked' : ''}`,\n      children: todoItem.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this), // 수정 버튼\n    // 완료한 일인 경우에는 null을 반환하여 보이지 않도록 함\n    !todoItem.checked ? edited ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"todoapp__item-edit-btn\",\n      onClick: onClickSubmitButton,\n      children: \"\\uD83D\\uDC4C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"todoapp__item-edit-btn\",\n      onClick: onClickEditButton,\n      children: \"\\u270F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"todoapp__item-delete-btn\",\n      onClick: onClickDeleteButton,\n      children: \"\\uD83D\\uDDD1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToDoItem, \"WTJnvauJuxkMeYXWfBHWZsZ6/t0=\");\n\n_c = ToDoItem;\nToDoItem.propTypes = {\n  todoItem: PropTypes.shape({\n    id: PropTypes.number,\n    text: PropTypes.string.isRequired\n  }),\n  todoList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired\n  })),\n  setTodoList: PropTypes.func.isRequired\n};\nexport default ToDoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoItem\");","map":{"version":3,"sources":["/Users/hellodegital/Desktop/React_Project/react/first-my-app/src/components/TodoList/ToDoItem.jsx"],"names":["React","useEffect","useRef","useState","PropTypes","ToDoItem","todoItem","todoList","setTodoList","edited","setEdited","newText","setNewTest","text","editInputRef","current","focus","onChangeCheckbox","nextTodoList","map","item","checked","id","onClickEditButton","onChangeEditInput","e","target","value","onClickSubmitButton","key","onClickDeleteButton","console","log","deleted","propTypes","shape","number","string","isRequired","arrayOf","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ToDoItem = ({ todoItem, todoList, setTodoList }) => {\n  const [edited, setEdited] = useState(false);\n  const [newText, setNewTest] = useState(todoItem.text);\n\n  const editInputRef = useRef(null);\n\n  useEffect(() => {\n    // edit 모드일때 포커싱을 한다.\n    if (edited) {\n      editInputRef.current.focus();\n    }\n  }, [edited]);\n\n  const onChangeCheckbox = () => {\n    const nextTodoList = todoList.map((item) => ({\n      ...item,\n      // id 값이 같은 항목의 checked 값을 Toggle 함\n      checked: item.id === todoItem.id ? !item.checked : item.checked,\n    }));\n\n    setTodoList(nextTodoList);\n  };\n\n  const onClickEditButton = () => {\n    setEdited(true);\n  };\n\n  const onChangeEditInput = (e) => {\n    setNewTest(e.target.value);\n  };\n\n  const onClickSubmitButton = (e) => {\n    if (e.key === 'Enter') {\n      const nextTodoList = todoList.map((item) => ({\n        ...item,\n        text: item.id === todoItem.id ? newText : item.text, // 새로운 아이템 내용을 넣어줌\n      }));\n      setTodoList(nextTodoList);\n\n      setEdited(false);\n    }\n  };\n\n  const onClickDeleteButton = () => {\n    if (console.log(\"지울꺼냐\")) {\n      const nextTodoList = todoList.map((item) => ({\n        ...item,\n        deleted: item.id === todoItem.id ? true : item.deleted,\n      }));\n\n      setTodoList(nextTodoList);\n    }\n  };\n\n  return (\n    <li className=\"todoapp__item\">\n      {/* 아이템 완료 체크 / 체크 해제를 위한 체크박스 */}\n      <input\n        type=\"checkbox\"\n        className=\"todoapp__item-checkbox\"\n        checked={todoItem.checked}\n        onChange={onChangeCheckbox}\n      />\n      {\n        // 아이템 내용\n        edited ? (\n          <input\n            type=\"text\"\n            className=\"todoapp__item-edit-input\"\n            value={newText}\n            ref={editInputRef}\n            onChange={onChangeEditInput}\n            onKeyPress={onClickSubmitButton}\n          />\n        ) : (\n          <span\n            className={`todoapp__item-ctx ${\n              todoItem.checked ? 'todoapp__item-ctx-checked' : ''\n            }`}\n          >\n            {todoItem.text}\n          </span>\n        )\n      }\n      {\n        // 수정 버튼\n        // 완료한 일인 경우에는 null을 반환하여 보이지 않도록 함\n        !todoItem.checked ? (\n          edited ? (\n            <button\n              type=\"button\"\n              className=\"todoapp__item-edit-btn\"\n              onClick={onClickSubmitButton}\n            >\n              👌\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"todoapp__item-edit-btn\"\n              onClick={onClickEditButton}\n            >\n              ✏\n            </button>\n          )\n        ) : null\n      }\n\n      {/* 삭제 버튼 */}\n      <button\n        type=\"button\"\n        className=\"todoapp__item-delete-btn\"\n        onClick={onClickDeleteButton}\n      >\n        🗑\n      </button>\n    </li>\n  );\n};\n\nToDoItem.propTypes = {\n  todoItem: PropTypes.shape({\n    id: PropTypes.number,\n    text: PropTypes.string.isRequired,\n  }),\n  todoList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n    })\n  ),\n  setTodoList: PropTypes.func.isRequired,\n};\n\nexport default ToDoItem;"]},"metadata":{},"sourceType":"module"}